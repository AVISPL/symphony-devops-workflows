# Copyright (c) 2022-2024 AVI-SPL Inc.
# All Rights Reserved.
# Prerequisites :
# - GitHub actions from AVI-SPL private repository must be available in local workspace directory
#
name: 'Email workflow status'
description: 'Email workflow status for current Git push or PR event'

inputs:
  sendEmailOnlyOnFailure:
    description: 'Send email only when current workflow status is not success'
    required: false
    default: 'false'
  builderSmtpHost:
    description: 'The SMTP server host address'
    required: true
  emailTo:
    description: 'The To email address'
    required: true
  emailFrom:
    description: 'The From email display name'
    required: true
  mvnResultsFile:
    description: >
      Path and name of file maven command results are being saved to
      Conents of this file will be appended by email sender action to email body it generates
    required: true

runs:
  using: "composite"
  steps:
    - name: Install jq
      uses: ./.github/symphony-devops-workflows/actions/install_jq

    - name: Get workflow status
      # TODO security thirdparty action (but recommended by GitHub support)
      #      Check if better way to get workflow status
      #      WARNING: variable job.status provides current job status,
      #      not status of previous jobs in same workflow
      #      Functions such as success() or failure() can ONLY be used in if: conditionals
      #      Solution should be generic and avoid hardcoding ob job names
      #      (found examples with "needs.job1.result=='failure'" that need to hardcode job name)
      # Get workflow conclusion (sets env variable WORKFLOW_CONCLUSION)
      uses: technote-space/workflow-conclusion-action@v2

    - name: Prepare email
      run: |
        # Prepare email

        # Status uppercase : SUCCESS / FAILURE (other value is unexpected)
        status="${WORKFLOW_CONCLUSION}"
        status="${status^^}"
        echo "Status is: [${status}]"

        # Should email be sent ?
        sendEmailOnlyOnFailure="${{inputs.sendEmailOnlyOnFailure}}"
        if [[ "true" == "${sendEmailOnlyOnFailure}" && "SUCCESS" == "${status}" ]]; then
          echo "Status is [${status}] and sendEmailOnlyOnFailure is [${sendEmailOnlyOnFailure}] => nothing to do, exiting"
          # Exit with success
          exit 0
        fi

        # Email subject variable (email_subject) is set below
        # Prepare body file (empty and ensure has write rights)
        body_file='body.txt'
        echo "" > ${body_file}

        # Get fields from event and build email contents
        run_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

        event_name="${{github.event_name}}"
        if [[ "pull_request" == "${event_name}" ]]; then
          echo "This is a pull request event"

          # Get data from event
          repo_name="${{ github.event.pull_request._links.html.href }}"
          repo_url="${{ github.event.pull_request.svn_url }}"
          author="${{ github.event.sender.login }}"
          branch_source="${{ github.event.pull_request.head.ref }}"
          branch_dest="${{ github.event.pull_request.base.ref }}"
          # Commit information
          git_sha_merge="${{ github.event.after }}"
          git_sha_source="${{ github.event.pull_request.head.sha }}"
          # PR information
          pr_url="${{ github.event.pull_request.html.href }}"
          pr_title=$(jq -r .pull_request.title "${GITHUB_EVENT_PATH}")
          pr_updated_at="${{ github.event.pull_request.updated_at }}"

          # Email Subject
          email_subject="[${repo_name}] PR branch [${branch_source}] [${status}]"

          # Write body file
          echo "<table border='2' style='border-collapse:collapse>; padding: 2px;'" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Repository url</td>" >> ${body_file}
          echo "<td>${repo_url}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>PR</td>" >> ${body_file}
          echo "<td>${pr_url}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>PR title</td>" >> ${body_file}
          echo "<td>${pr_title}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>PR FROM branch [${branch_source}]</td>" >> ${body_file}
          echo "<td>PR TO branch [${branch_dest}]</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>PR updated at</td>" >> ${body_file}
          echo "<td>[${pr_updated_at}]</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Git merge commit being built</td>" >> ${body_file}
          echo "<td>${git_sha_merge}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Git commit SHA from source branch</td>" >> ${body_file}
          echo "<td>${git_sha_source}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Workflow run url</td>" >> ${body_file}
          echo "<td>${run_url}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

        elif [[ "push" == "${event_name}" ]]; then
          echo "This is a push event"

          # Get data from event
          repo_name="${{ github.event.repository.name }}"
          repo_url="${{ github.event.repository.url }}"
          author="${{ github.event.pusher.name }}"
          branch_name="${{ github.ref }}"
          # Latest commit information
          git_head_sha="${{ github.event.head_commit.id }}"
          git_head_message=$(jq -r .head_commit.message "${GITHUB_EVENT_PATH}")
          # In case there are new line characters in message, replace them with <br>
          #git_head_message="${git_head_message//'\n'/<br>}"
          git_head_author="${{ github.event.head_commit.author.email }}"
          git_head_url="${{ github.event.head_commit.url }}"
          git_head_timestamp="${{ github.event.head_commit.timestamp }}"
          # Pusher
          git_pusher="${{ github.event.pusher.name }} (${{ github.event.pusher.email }})"

          # Email Subject
          email_subject="[${repo_name}] Push on branch [${branch_name}] [${status}]"

          # Write body file
          echo "<table border='2' style='border-collapse:collapse>; padding: 2px;'" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Repository url</td>" >> ${body_file}
          echo "<td>${repo_url}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Branch</td>" >> ${body_file}
          echo "<td>${branch_name}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Workflow run url</td>" >> ${body_file}
          echo "<td>${run_url}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Latest Git commit SHA</td>" >> ${body_file}
          echo "<td>${git_head_sha}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Latest Git commit message</td>" >> ${body_file}
          echo "<td><pre>${git_head_message}</pre></td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Latest Git commit author</td>" >> ${body_file}
          echo "<td>${git_head_author}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Latest Git commit timestamp</td>" >> ${body_file}
          echo "<td>${git_head_timestamp}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Latest Git commit url</td>" >> ${body_file}
          echo "<td>${git_head_url}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Pushed by</td>" >> ${body_file}
          echo "<td>${git_pusher}</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

        else # just in case the workflow was triggered by unexpected event
          echo "ERROR unexpected event name [${event_name}] (expected 'pull_request' or 'push')"
          exit 1
        fi

        echo "<tr>" >> ${body_file}
        echo "<td>Build module</td>" >> ${body_file}
        echo "<td>$(sed -n '1p' < ./version.txt)</td>" >> ${body_file}
        echo "</tr>" >> ${body_file}

        echo "<tr>" >> ${body_file}
        echo "<td>Build version</td>" >> ${body_file}
        echo "<td>$(sed -n '2p' < ./version.txt)</td>" >> ${body_file}
        echo "</tr>" >> ${body_file}

        # if docker.txt exists, grab docker registry / tags of module and include in email
        if [ -f ./docker.txt ]; then
          echo "<tr>" >> ${body_file}
          echo "<td>Docker registry project</td>" >> ${body_file}
          echo "<td>$(sed -n '1p' < ./docker.txt)</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}

          echo "<tr>" >> ${body_file}
          echo "<td>Docker registry tags</td>" >> ${body_file}
          echo "<td>$(sed -n '2p' < ./docker.txt)</td>" >> ${body_file}
          echo "</tr>" >> ${body_file}
        fi

        echo "</table>" >> ${body_file}

        echo "<br>" >> ${body_file}
        echo "<br>" >> ${body_file}

        # replace all /n with <br>
        sed -i '{:q;N;s/\n/<br>/g;t q}' ${{ inputs.mvnResultsFile }}

        # append mvn_results.txt, which is the mvn command output to body_file
        cat ${{ inputs.mvnResultsFile }} >> ${body_file}

        # Print email contents
        echo "Email subject: [${email_subject}]"
        echo "Email body:" && cat ${body_file}
        echo ""
        # create environment variables from subject to pass to next step
        echo "SUBJECT=$email_subject" >> $GITHUB_ENV
        echo ""
        echo ""
      shell: bash
    - name: Send mail
      uses: dawidd6/action-send-mail@v3.11.0
      with:
       server_address: ${{inputs.builderSmtpHost}}
       ignore_cert: true
       secure: false
       subject: ${{ env.SUBJECT }}
       to: ${{inputs.emailTo}}
       from: ${{inputs.emailFrom}}
       html_body: file://body.txt