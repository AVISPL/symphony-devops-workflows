# Copyright (c) 2022 AVI-SPL Inc.
# All Rights Reserved.
#
# Prerequisites:
# - Security : tag(s) name(s) must have been verified beforehand, this action does not do any validity check
# - Linux docker (cli) command must be available on current runner
# - All files required for building the image must be present on the disk at expected location
# - TODO non self-hosted runner - document prerequisites : credentials for accessing to Docker registry
name: 'Docker build tag push'
description: 'Docker build, tag and push to Docker registry'
inputs:
  docker-file:
    description: 'The path of the Dockerfile to be built'
    required: true
  docker-registry-name:
    description: 'The Docker registry name (url) used for tagging built docker image, e.g. "myregistry.com"'
    required: true
  docker-registry-project-name:
    description: 'The project name inside registry used for tagging built docker image, e.g. "symphony-microservices"'
    required: true
  docker-registry-microservice-name:
    description: 'The microservice name used for tagging built docker image, e.g. "my-microservice"'
    required: true
  docker-tags:
    description: >
      Coma separated list of tags to set on built docker image, e.g. "1.1.0.202204051407", "qa".
      Do not use following special characters: '*'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Docker build tag push
      run: |
        echo "Docker build tag push"
        # WARNING need to use sudo to run docker commands

        # TODO non self-hosted runner - handle credentials to private docker registry
        # TODO non self-hosted runner - test if using sudo is OK

        # Ensure docker cli is available
        echo "Docker version:"
        sudo docker version --format '{{json .}}'
        echo

        # Prepare docker image tag prefix
        IMAGE_TAG_PREFIX="${{ inputs.docker-registry-name }}/${{ inputs.docker-registry-project-name }}/${{ inputs.docker-registry-microservice-name }}"
        echo "IMAGE_TAG_PREFIX: [${IMAGE_TAG_PREFIX}]"
        echo

        # Compute tags
        TAGS="${{ inputs.docker-tags }}"
        echo "Tags requested: [${TAGS}]"

        # Convert tags string to an array for easier usage
        declare -a TAGS_ARRAY=( $(echo ${TAGS} | tr ',' ' ') )
        echo "Tags that will be created (array form): [${TAGS_ARRAY[@]}]"
        # DEBUG TAGS_ARRAY contents
        #echo "TAGS_ARRAY length : ${#TAGS_ARRAY[@]}"
        #echo "TAGS_ARRAY[0]: [${TAGS_ARRAY[0]}]"
        #echo "TAGS_ARRAY[1]: [${TAGS_ARRAY[1]}]"
        #echo "TAGS_ARRAY[2]: [${TAGS_ARRAY[2]}]"

        # TODO handle option to not add tags ? (in which case empty is not an error)
        # Check there is at least one tag
        if [[ ${#TAGS_ARRAY[@]} -lt 1 ]]; then
          echo "[ERROR] No valid tags have been specified"
          exit 1
        fi

        # Build and push docker image with first tag
        echo
        FIRST_TAG="${IMAGE_TAG_PREFIX}:${TAGS_ARRAY[0]}"
        echo "Docker build..."
        sudo docker build -f "${{ inputs.docker-file }}" -t "${FIRST_TAG}" .
        sudo docker push "${FIRST_TAG}"

        # Loop over other tags (if any) and re-tag and push tag
        for (( i=1; i<${#TAGS_ARRAY[@]}; i++ )); do
          echo
          CURRENT_TAG="${IMAGE_TAG_PREFIX}:${TAGS_ARRAY[$i]}"
          #
          echo "Adding tag [${CURRENT_TAG}]..."
          sudo docker tag "${FIRST_TAG}" "${CURRENT_TAG}"
          #
          echo "Pushing tag [${CURRENT_TAG}]..."
          sudo docker push "${CURRENT_TAG}"
          #
          echo "Tag [${CURRENT_TAG}] DONE"
        done
      shell: bash
