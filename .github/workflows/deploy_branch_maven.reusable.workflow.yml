# Copyright (c) 2022-2024 AVI-SPL Inc.
# All Rights Reserved.
#
# Builds, runs tests and deploys a Maven project
# Moves Git tag 'snapshot' to the latest commit on branch
# Checkouts current repository/branch (inherited from caller workflow)
name: reusable_workflow_deploy_branch_maven

on:
  workflow_call:
    inputs:
      # TODO naming of parameters - use "-" or "_" but not mixup of both
      pom-xml-file:
        description: 'The path of the project pom.xml'
        required: false
        default: 'pom.xml'
        type: string
      git_tag:
        description: 'Tag to be created on Git revision, e.g. "snapshot" for daily build. Empty means no tag'
        required: false
        type: string
        default: 'snapshot'
      maven_goals:
        description: 'The goals for the mvn command (optional)'
        required: false
        type: string
        default: 'clean deploy'
      maven_other_options:
        description: 'Maven options added at the end of the mvn command, overrides previous options'
        required: false
        type: string
        default: '-DskipTests=false -DskipITs=false'
      runs-on_label_1:
        description: 'The job runner first label (optional)'
        required: false
        type: string
        default: 'self-hosted'
      runs-on_label_2:
        description: 'The job runner second label (optional)'
        required: false
        type: string
        default: 'linux'
      symphony-devops-workflows_ref:
        description: 'symphony-devops-workflows reference branch (or tag) to be used. E.g. ''develop'''
        required: false
        type: string
        default: 'develop'
      docker-file:
        description: |
          The path of the Dockerfile to be built. If empty, no docker build will occur.
          Path can be either a relative path, in which case it is relative to the project's
          workspace directory (e.g. './path/to/Dockerfile'), or an aboslute path
          (e.g. '${GITHUB_WORKSPACE}/path/to/Dockerfile')
          Note that there GitHub workflows enforce limitations for accessing files
          outside of workspace directory
        required: false
        type: string
      docker-tag-push:
        description: 'Whether to tag and push docker image. Mandatory when docker-file is present'
        required: false
        type: boolean
        default: false
      symphony-microservice-name:
        description: 'symphony-microservice-name is used to build and tag docker image. Mandatory when docker-file is present'
        required: false
        type: string
        default: ''
      docker-registry-project-name:
        description: 'docker-registry-project-name is used to build and tag docker image. Mandatory when docker-file is present'
        required: false
        type: string
        default: 'symphony-microservices'
      kubernetes-update-deployment-descriptor:
        description: 'Whether or not to update Kubernetes deployment descriptor so service is automatically deployed to cluster'
        required: false
        type: boolean
        default: false
      dependabot-submit-dependencies:
        description: 'Whether or not to send project''s Maven dependencies to Dependabot'
        required: false
        type: boolean
        default: false
      dependabot-submit-dependencies-directory:
        description: 'The directory in which the project''s pom.xml resides is needed to submit to Dependabot'
        required: false
        type: string
      mvn-output-file:
        description: |
          Path and name of file maven command results are being saved to
          Conents of this file will be appended by email sender action to email body it generates
        required: true
        type: string
      module-name:
        description: |
          This optional input is reserved for modules that are packaged as war file (i.e. symphony-commproxy). 
          The reason this input is required is because symphony-commproxy is not the name of the project within the Symphony harbor
          registry (hence, symphony-microservice-name cannot be used). If specified, a step in this workflow will unzip the war file
          and update the version.txt of the module to make sure correct version gets displayed in Symphony UI. Furthermore, 
          respective Dockerfile needs the expanded war file (with updated version) to be copied to the tomcat webapps directory.
        required: false
        type: string
        default: ''
      run-sonar-qube-scan:
        description: |
          Indicates if SonarQube scan step should run
        type: boolean
        required: false
        default: false
      sonar-qube-quality-gate-timeout-minutes:
        description: |
          Indicates the duration to wait for sonarqube-quality-gate-action before forcing the step to fail.
        type: number
        required: false
        default: 5
    #
    secrets:
      # WARNING: secret names do not seem to accept "-" or "_" characters (not documented)
      nexusUser:
        description: the username of nexus user which performs Maven commands
        required: true
      nexusPassword:
        description: the password of nexus user which performs Maven commands
        required: true
      sonarToken:
        description: the token of Sonarqube code analyzer
        required: false
      userToken:
        description: 'Token of the user who is running the workflow. Required for updating Git tags'
        required: true
      ciToken:
        description: |
          GitHub token to be used for updating AVI-SPL private repositories. In this workflow,
          it is used only for updating Kubernetes deployment files
          This token should belong to the CI user, although workflow would work with any token
          with correct permissions
          It must be a GitHub PAT (Personal Access Token) with read and write authorizations
          on the GitHub repositories to be read/updated
        required: false
      builderSmtpHost:
        description: 'The SMTP server host address'
        required: true
      emailTo:
        description: 'The To email address'
        required: true
      emailFrom:
        description: 'The From email display name'
        required: true
      commitUserName:
        description: |
          User name to be used as Git committer by the workflow, when the workflow issues new 
          Git commits (for example when updating deployment files). It is unrelated to the person 
          who ran the workflow. It is recommended to use a technical user dedicated to the CI system.
          For example, if John did run the workflow, and commit user name provided is 'MyCIUser',
          the commit will look like:
            Author: John <John@users.noreply.github.com>
            Committer: MyCIUser
            Signed-off-by: MyCIUser <MyCIUser@...com>
        required: true
      commitUserEmail:
        description: |
          User email to be used as Git committer. This is NOT the user email
          of the person who ran the workflow, see commit user name.
        required: true
env:
  SONAR_HOST_URL: "https://sonarqube-dev.devvnocsymphony.com/"
jobs:
  reusable_job_deploy_branch_maven:
    # Permissions are required for actions that need to do changes on repository
    # (change files or git operations) or which require access to some GitHub APIs
    # Permissions documentation : https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idpermissions
    permissions:
      # Contents write is required for git tagging
      # and for calling dependencies Submission API (used by maven-dependency-submission-action)
      contents: write
      # Actions read is required by technote-space/workflow-conclusion-action for accessing
      # actions API for getting actions results
      actions: read

    # Use runner which has requested labels
    # Note: GitHub does not allow to pass an object as job input (such as an array)
    # so need this trick with multiple variables
    runs-on: [ "${{ inputs.runs-on_label_1 }}", "${{ inputs.runs-on_label_2 }}" ]
    steps:
      # WARNING checkout repository first because this action resets the checkout directory
      # (so other files written into it will be removed)
      - name: Git checkout current repository/branch
        uses: actions/checkout@v4.1.1
        with:
          # Checkout all branches and tags (required to work with tags in git_delete_tag action)
          fetch-depth: '0' # 0 indicates all history for all branches and tags
          # Force clean to avoid leftover changes from previous runs in workspace in current runner
          clean: 'true'

      # GitHub actions cannot be executed directly from private repository
      # (feature not available yet)
      # So checkout the actions into local workspace directory and run them from there
      - name: Checkout actions from private repository
        uses: actions/checkout@v4.1.1
        with:
          repository: AVISPL/symphony-devops-workflows
          # Select revision
          ref: '${{ inputs.symphony-devops-workflows_ref }}'
          # Indicate where to check out project to
          path: ./.github/symphony-devops-workflows

      - name: Setup JDK
        uses: ./.github/symphony-devops-workflows/actions/setup_jdk
        with:
          distribution: 'custom'

      - name: Setup Maven settings
        uses: ./.github/symphony-devops-workflows/actions/setup_maven_settings
        with:
          nexus-user: ${{ secrets.nexusUser }}
          nexus-password: ${{ secrets.nexusPassword }}

      - name: Get project version
        id: get_project_version
        uses: ./.github/symphony-devops-workflows/actions/maven_get_project_version
        with:
          pom-xml-file: ${{ inputs.pom-xml-file }}

      - name: Compute build number
        id: compute_build_number
        uses: ./.github/symphony-devops-workflows/actions/build_number

      # Compute docker tags to be reused as "global variables"
      - name: Compute docker tags
        id: compute_docker_tags
        run: |
          echo "Compute docker tags"
          DOCKER_TAG_WITH_VERSION="${{ steps.get_project_version.outputs.project-version }}.${{ steps.compute_build_number.outputs.build-number }}"
          DOCKER_TAGS_ALL="snapshot,${DOCKER_TAG_WITH_VERSION}"
          DOCKER_IMAGE_TAG_PREFIX="registry.vnocsymphony.com/${{ inputs.docker-registry-project-name }}/${{ inputs.symphony-microservice-name }}"
          #
          echo "DOCKER_TAG_WITH_VERSION: [${DOCKER_TAG_WITH_VERSION}]"
          echo "DOCKER_TAGS_ALL: [${DOCKER_TAGS_ALL}]"
          echo "DOCKER_IMAGE_TAG_PREFIX: [${DOCKER_IMAGE_TAG_PREFIX}]"
          #
          echo "DOCKER_TAG_WITH_VERSION=${DOCKER_TAG_WITH_VERSION}" >> $GITHUB_OUTPUT
          echo "DOCKER_TAGS_ALL=${DOCKER_TAGS_ALL}" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE_TAG_PREFIX=${DOCKER_IMAGE_TAG_PREFIX}" >> $GITHUB_OUTPUT

        shell: bash

      - name: Create version and docker information files to send to email sender job
        run: |
          REPOSITORY=${GITHUB_REPOSITORY}
          # Strip "AVISPL/ from GITHUB_REPOSITORY environment variable
          REPOSITORY=${REPOSITORY//AVISPL\/}

          # Add name of repository to first line of version.txt
          echo "$REPOSITORY" > version.txt

          # Add DOCKER_TAG_WITH_VERSION to second line of version.txt
          echo "${{ steps.compute_docker_tags.outputs.DOCKER_TAG_WITH_VERSION }}" >> version.txt

          # Next section should only be executed if there is non-empty docker-file input
          if [[! -n "${{ inputs.docker-file }}"]]; then
            # Add "DOCKER_IMAGE_TAG_PREFIX(ends with /)REPOSITORY" to first line of docker.txt
            echo "${{ steps.compute_docker_tags.outputs.DOCKER_IMAGE_TAG_PREFIX }}$REPOSITORY" > docker.txt

            # Add DOCKER_TAGS_ALL to second line of docker.txt
            echo "${{ steps.compute_docker_tags.outputs.DOCKER_TAGS_ALL }}" >> docker.txt
          fi

      - # Git tag is mandatory for this workflow
        name: Validate git tags
        id: validate_git_tags
        uses: ./.github/symphony-devops-workflows/actions/tags_validate_clean
        with:
          tags: '${{ inputs.git_tag }}'
          allowEmpty: 'false'

      - name: Validate docker tags
        id: validate_docker_tags
        uses: ./.github/symphony-devops-workflows/actions/tags_validate_clean
        with:
          tags: '${{ steps.compute_docker_tags.outputs.DOCKER_TAGS_ALL }}'
          allowEmpty: 'false'

      - name: SonarQube scan
        if: ${{ inputs.run-sonar-qube-scan }}
        env:
          SONAR_TOKEN: ${{ secrets.sonarToken }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -DskipTests  | tee ./sonarqube_results.txt

      # Check the Quality Gate status.
      - name: SonarQube quality gate check
        if: ${{ inputs.run-sonar-qube-scan }}
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        # Force to fail step after specific time.
        timeout-minutes: ${{ inputs.sonar-qube-quality-gate-timeout-minutes }}
        env:
         SONAR_TOKEN: ${{ secrets.sonarToken }}

      - name: SonarQube quality gate output
        if: ${{ inputs.run-sonar-qube-scan && always() }}
        shell: bash
        run: |
          # extract SonarQube dashboard URL from previous step's output and print it in workflow logs to allow for easy access to results
          color=green
          dashboardUrl=`sed -n 's/^dashboardUrl=\(.*\)/\1/p' < ./target/sonar/report-task.txt`
          if [ ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }} != 'PASSED' ]; then
            # if SonarQube scan has failed, create empty mvn_results.txt as next step (Maven build and Git tag) will not run. 
            # Add text to file being passed to email sender with SonarQube status and dashboard URL
            color=red
            touch ${{ inputs.mvn-output-file }}
            echo "----------------------------------------------------------------------------" >> ${{ inputs.mvn-output-file }}
            echo "MAVEN DEPLOYMENT WAS NOT ATTEMPTED" >> ${{ inputs.mvn-output-file }}
            echo "----------------------------------------------------------------------------" >> ${{ inputs.mvn-output-file }}
            echo "SonarQube quality check finished with status of <b style='color:$color;'>${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}</b>" >> ${{ inputs.mvn-output-file }}
            echo "Maven command to deploy this module, and workflow action to tag it are being cancelled!" >> ${{ inputs.mvn-output-file }}
            echo "Please go to $dashboardUrl and fix issue(s) flagged by SonarQube to fix deployment of this module." >> ${{ inputs.mvn-output-file }}
          fi
          echo "SonarQube quality check finished with status of <b style='color:$color;'>${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}</b>" >> ./sonarqube_results.txt
          echo "To see detailed SonarQube analysis, please go to $dashboardUrl" >> ./sonarqube_results.txt
          # below lines are to add text to output within workflow with SonarQube's results
          echo "SonarQube quality check finished with status of ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          echo "To see detailed SonarQube analysis, please go to $dashboardUrl"

      - name: Maven build and Git tag
        uses: ./.github/symphony-devops-workflows/actions/maven_build_and_tag
        with:
          # Maven options
          pom-xml-file: ${{ inputs.pom-xml-file }}
          maven_goals: ${{ inputs.maven_goals }}
          maven_other_options: -Dbuilder.version=${{ steps.compute_build_number.outputs.build-number }} ${{ inputs.maven_other_options }}
          # Git options
          git_tag: ${{ inputs.git_tag }}
          git_tag_fail_if_exists: 'false'
          git_delete_tag_if_exists: 'true'
          github_token: ${{ secrets.userToken }}
          mvn-output-file: ${{ inputs.mvn-output-file }}

      # Update version.txt (custom step that only applies to modules such as symphony-commproxy)
      - name: Update version.txt if exists
        if: ${{ inputs.module-name != '' }}
        run: |
          unzip -q -d ${{ inputs.module-name }} ./target/${{ inputs.module-name }}.war
          # if module contains version.txt, append build-number to version specified in this file
          if [ -f ./${{ inputs.module-name }}/WEB-INF/classes/version.txt ]; then
            echo "version.txt exists, appending build-number to end of version specified in this file"
            sed -i ' 1 s/.*/&.${{ steps.compute_build_number.outputs.build-number }}/' ./${{ inputs.module-name }}/WEB-INF/classes/version.txt
          fi

      # Docker
      - name: Docker build
        id: docker_build_tag_push
        # Run docker build only when a docker file has been specified (not empty value)
        if: ${{ !cancelled() && !failure() && inputs.docker-file != '' }}
        uses: ./.github/symphony-devops-workflows/actions/docker_build_tag_push
        with:
          docker-file: ${{ inputs.docker-file }}
          docker-tag-push: ${{ inputs.docker-tag-push }}
          docker-tags: '${{ steps.compute_docker_tags.outputs.DOCKER_TAGS_ALL }}'
          docker-image-prefix: '${{ steps.compute_docker_tags.outputs.DOCKER_IMAGE_TAG_PREFIX }}'

      - name: Kubernetes update deployment
        if: ${{ !cancelled() && !failure() && inputs.kubernetes-update-deployment-descriptor && inputs.docker-file != '' && steps.docker_build_tag_push.outputs.docker-pushed == 'true' }}
        uses: ./.github/symphony-devops-workflows/actions/kubernetes_update_deployment
        with:
          # Name of Helm subchart (name of directory under "/symphony/charts")
          # in symphony-kubernetes-deployer repository
          symphony-microservice-name: '${{ inputs.symphony-microservice-name }}'
          # New value for docker image in deployment file
          # Only docker tag name (e.g. 1.6.0-SNAPSHOT.2307251259), not full path to repository
          docker-image: '${{ steps.compute_docker_tags.outputs.DOCKER_TAG_WITH_VERSION }}'
          fail-if-no-file-change: 'true'
          # WARNING : relative path to current workspace, without leading "./" (for some reason this breaks replacement)
          workspace-checkout-dir: 'symphony-kubernetes-deployer'
          # The revision (branch) to be updated in deployer repository
          # Value should be overridden for testing purpose only.
          # By default, 'develop' branch should be used
          symphony-kubernetes-deployer-ref: 'develop'
          commit-message: '[AUTO] Source https://github.com/${{ github.repository }}/commit/${{ github.sha }}'
          # Token for checking-out private repository
          # Use a PAT (Personal Access Token) from a user who has write permission on specified repository
          github-token: ${{ secrets.ciToken }}
          commit-user-name: ${{ secrets.commitUserName }}
          commit-user-email: ${{ secrets.commitUserEmail }}

      # Submit Maven dependencies to Dependabot submission API
      - name: Submit Maven dependencies with directory specified
        if: ${{ !cancelled() && !failure() && inputs.dependabot-submit-dependencies && inputs.dependabot-submit-dependencies-directory != '' }}
        uses: advanced-security/maven-dependency-submission-action@v4.0.0
        with:
          directory: '${{ inputs.dependabot-submit-dependencies-directory }}'
      - name: Submit Maven dependencies without directory specified
        if: ${{ !cancelled() && !failure() && inputs.dependabot-submit-dependencies && inputs.dependabot-submit-dependencies-directory == '' }}
        uses: advanced-security/maven-dependency-submission-action@v4.0.0

  # Job to send email - execute event when previous job(s) in workflow have failed
  job_send_mail:
    # For details on if condition when previous job is skipped and there is a needs condition,
    # see discussions here:
    # https://github.com/actions/runner/issues/491#issuecomment-926924523
    if: ${{ !cancelled() }}
    runs-on: [ "${{ inputs.runs-on_label_1 }}", "${{ inputs.runs-on_label_2 }}" ]
    needs: reusable_job_deploy_branch_maven
    steps:
      # Job might not be executed on same runner than first job (if several candidates
      # match labels), in which case workspace will be empty,
      # so need to checkout again required actions from dedicated repository
      - name: Checkout actions from private repository
        uses: actions/checkout@v4.1.1
        with:
          repository: AVISPL/symphony-devops-workflows
          # Select revision
          ref: '${{ inputs.symphony-devops-workflows_ref }}'
          # Indicate where to check out project to
          path: ./.github/symphony-devops-workflows

      - name: Send email workflow status
        uses: ./.github/symphony-devops-workflows/actions/send_email_workflow_status
        with:
          builderSmtpHost: ${{ secrets.builderSmtpHost }}
          mvn-output-file: ${{ inputs.mvn-output-file }}
          sonarqube-output-file: ./sonarqube_results.txt
          include-sonar-qube-results: ${{ inputs.run-sonar-qube-scan }}
          emailTo: ${{ secrets.emailTo }}
          emailFrom: ${{ secrets.emailFrom }}
          ciToken: ${{ secrets.ciToken }}
