# Copyright (c) 2022 AVI-SPL Inc.
# All Rights Reserved.
#
# Perform checks on pull request before pull request is merged
# Builds maven project and executes tests, but
# does NOT deploy to Nexus, nor changes Git , not pushes/tags to Docker registry
# See discussions here about push event VS pull_request event
# https://github.community/t/trigger-workflow-only-on-pull-request-merge/17359
name: reusable_workflow_check_branch_maven

on:
  workflow_call:
    inputs:
      # TODO naming of parameters - use "-" or "_" but not mixup of both
      pom-xml-file:
        description: 'The path of the project pom.xml'
        required: false
        default: 'pom.xml'
        type: string
      maven_goals:
        description: 'The goals for the mvn command (optional)'
        required: false
        type: string
        default: 'clean verify'
      maven_other_options:
        description: 'Maven options added at the end of the mvn command, overrides previous options'
        required: false
        type: string
        default: '-DskipTests=false -DskipITs=false'
      runs-on_label_1:
        description: 'The job runner first label (optional)'
        required: false
        type: string
        default: 'self-hosted'
      runs-on_label_2:
        description: 'The job runner second label (optional)'
        required: false
        type: string
        default: 'linux'
      symphony-devops-workflows_ref:
        description: 'symphony-devops-workflows reference branch (or tag) to be used. E.g. ''develop'''
        required: false
        type: string
        default: 'develop'
      docker-file:
        description: |
          The path of the Dockerfile to be built. If empty, no docker build will occur.
          Path can be either a relative path, in which case it is relative to the project's
          workspace directory (e.g. './path/to/Dockerfile'), or an aboslute path
          (e.g. '${GITHUB_WORKSPACE}/path/to/Dockerfile')
          Note that there GitHub workflows enforce limitations for accessing files
          outside of workspace directory
        required: false
        type: string
      module-name:
        description: |
          This optional input is reserved for modules that are packaged as war file (i.e. symphony-commproxy). 
          If this input is specified the value will be used within a step in this workflow to unzip it. 
          The respective Dockerfile for such modules does not accept the war file and require expanded war file
          to be copied to the tomcat webapps directory.
        required: false
        type: string
        default: ''
      run-sonar-qube-scan:
        description: |
          Indicates if SonarQube scan step should run
        type: boolean
        required: false
        default: false
      sonar-qube-quality-gate-timeout-minutes:
        description: |
          Indicates the duration to wait for sonarqube-quality-gate-action before forcing the step to fail.
        type: number
        required: false
        default: 5
    #
    secrets:
      # WARNING: secret names do not seem to accept "-" or "_" characters (not documented)
      nexusUser:
        description: the username of nexus user which performs Maven commands
        required: true
      nexusPassword:
        description: the password of nexus user which performs Maven commands
        required: true
      sonarToken:
        description: the token of Sonarqube code analyzer
        required: false
      commitUserName:
        description: |
          User name to be used as Git committer by the workflow, when the workflow issues new 
          Git commits (for example when updating deployment files). It is unrelated to the person 
          who ran the workflow. It is recommended to use a technical user dedicated to the CI system.
          For example, if John did run the workflow, and commit user name provided is 'MyCIUser',
          the commit will look like:
            Author: John <John@users.noreply.github.com>
            Committer: MyCIUser
            Signed-off-by: MyCIUser <MyCIUser@...com>
        required: true
env:
  SONAR_HOST_URL: "https://sonarqube-dev.devvnocsymphony.com/"
jobs:
  run_workflow_decision:
    runs-on: ${{ inputs.runs-on_label_1 }}
    outputs:
      CONTINUE: ${{ steps.continue.outputs.continue }}
    steps:
      - name: Should workflow be executed
        id: continue
        shell: bash
        env:
          AUTO_RELEASE_COMMIT_ACTOR: ${{ secrets.commitUserName}}
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          commit_message=$(echo "$commit_message" | sed 's/\([^\\]\)"/\1\\"/g')
          if [[ "$AUTO_RELEASE_COMMIT_ACTOR" = "${{ github.actor }}" ]] && [[ $commit_message == "[AUTO]"* ]]; then
            echo "Aborting workflow. Commit was performed by automated actor with [AUTO] in commit message."
            echo "continue=false" >> $GITHUB_OUTPUT
          else
            echo "Executing workflow"
            echo "continue=true" >> $GITHUB_OUTPUT
          fi
  reusable_job_check_branch_maven:
    # Permissions are required for actions that need to do changes on repository
    # (change files or git operations) or which require access to some GitHub APIs
    # Permissions documentation : https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idpermissions
    permissions:
      # Contents write is required for git tagging
      # TODO check workflow should not need write permission
      contents: write
      # Actions read is required by technote-space/workflow-conclusion-action for accessing
      # actions API for getting actions results
      actions: read

    # Use runner which has requested labels
    # Note: GitHub does not allow to pass an object as job input (such as an array)
    # so need this trick with multiple variables
    runs-on: ${{ inputs.runs-on_label_1 }}

    needs: [run_workflow_decision]
    if: ${{ needs.run_workflow_decision.outputs.continue == 'true' }}
    steps:
      # WARNING checkout repository first because this action resets the checkout directory
      # (so other files written into it will be removed)
      - name: Git checkout current repository/branch
        uses: actions/checkout@v4.1.1
        with:
          # TODO HOUSEKEEPING check if fetch-depth 0 is really needed (should not
          #      as no Git tags are manipulated by this workflow)
          # Checkout all branches and tags (required to work with tags in git_delete_tag action)
          fetch-depth: '0' # 0 indicates all history for all branches and tags
          # Force clean to avoid leftover changes from previous runs in workspace in current runner
          clean: 'true'

      # GitHub actions cannot be executed directly from private repository
      # (feature not available yet)
      # So checkout the actions into local workspace directory and run them from there
      - name: Checkout actions from private repository
        uses: actions/checkout@v4.1.1
        with:
          repository: AVISPL/symphony-devops-workflows
          # Select revision
          ref: '${{ inputs.symphony-devops-workflows_ref }}'
          # Indicate where to check out project to
          path: ./.github/symphony-devops-workflows

      - name: Setup JDK
        uses: ./.github/symphony-devops-workflows/actions/setup_jdk
        with:
          distribution: 'custom'

      - name: Setup Maven settings
        uses: ./.github/symphony-devops-workflows/actions/setup_maven_settings
        with:
          nexus-user: ${{ secrets.nexusUser }}
          nexus-password: ${{ secrets.nexusPassword }}

      - name: Get project version
        id: get_project_version
        uses: ./.github/symphony-devops-workflows/actions/maven_get_project_version
        with:
          pom-xml-file: ${{ inputs.pom-xml-file }}

      - name: Compute build number
        id: compute_build_number
        uses: ./.github/symphony-devops-workflows/actions/build_number

      - name: Validate docker tags
        id: validate_docker_tags
        uses: ./.github/symphony-devops-workflows/actions/tags_validate_clean
        with:
          tags: 'snapshot,${{ steps.get_project_version.outputs.project-version }}.${{ steps.compute_build_number.outputs.build-number }}'
          allowEmpty: 'false'

      - name: Maven build
        uses: ./.github/symphony-devops-workflows/actions/maven_build_and_tag
        with:
          # Maven options
          pom-xml-file: ${{ inputs.pom-xml-file }}
          maven_goals: ${{ inputs.maven_goals }}
          maven_other_options: -Dbuilder.version=${{ steps.compute_build_number.outputs.build-number }} ${{ inputs.maven_other_options }}
          # Git options
          git_tag: ''

      - name: SonarQube scan
        if: ${{ inputs.run-sonar-qube-scan }}
        env:
          SONAR_TOKEN: ${{ secrets.sonarToken }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Duser.timezone=UTC

      # Check the Quality Gate status.
      - name: SonarQube quality gate check
        if: ${{ inputs.run-sonar-qube-scan }}
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        # Force to fail step after specific time.
        timeout-minutes: ${{ inputs.sonar-qube-quality-gate-timeout-minutes }}
        env:
         SONAR_TOKEN: ${{ secrets.sonarToken }}

      - name: SonarQube quality gate output
        if: ${{ inputs.run-sonar-qube-scan && always() }} 
        shell: bash
        run: |
          # extract SonarQube dashboard URL from previous step's output and print it in workflow logs to allow for easy access to results
          dashboardUrl=`sed -n 's/^dashboardUrl=\(.*\)/\1/p' < ./target/sonar/report-task.txt`
          echo "SonarQube quality check finished with status of ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          echo "To see detailed SonarQube analysis, please go to $dashboardUrl"

      # Unzip war file when module-name input is specified (reserved step for modules with "war" packaging)
      - name: Unzip war file if module-name is specified
        if: ${{ inputs.module-name != '' }}
        run: unzip -q -d ${{ inputs.module-name }} ./target/${{ inputs.module-name }}.war

      # Docker
      - name: Docker build tag push
        # Run docker build only when a docker file has been specified (not empty value)
        if: ${{ !cancelled() && !failure() && inputs.docker-file != '' }}
        uses: ./.github/symphony-devops-workflows/actions/docker_build_tag_push
        with:
          docker-file: ${{ inputs.docker-file }}
          docker-tag-push: false