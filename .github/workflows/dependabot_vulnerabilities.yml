---
name: symphony_vulnerability_collector
on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs:
      state:
        description: >
          A comma-separated list of states. If specified, only alerts with
          these states will be returned.

          Can be: auto_dismissed, dismissed, fixed, open
        required: false
        type: string
        default: open
      severity:
        description: >
          A comma-separated list of severities. If specified, only alerts
          with these severities will be returned.

          Can be: low, medium, high, critical
        required: false
        type: string
        default: high,critical
env:
  URL_START: https://api.github.com/repos/AVISPL/
  URL_END: /dependabot/alerts
  URL_PAUSED_END: /automated-security-fixes
jobs:
  vulnerability-finder:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.vulnerability-finder.outputs.matrix }}
    steps:
      - name: Set required variables for manual or scheduled run
        env:
          DEFAULT_STATE: 'open'
          DEFAULT_SEVERITIES: 'low,medium,high,critical'
        run: |
          echo "STATES=${{ github.event.inputs.state || env.DEFAULT_STATE }}" >> $GITHUB_ENV
          echo "SEVERITIES=${{ github.event.inputs.severity || env.DEFAULT_SEVERITIES }}" >> $GITHUB_ENV
      - name: Git checkout current repository/branch
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: "0"
          clean: "true"
      #- name: Git checkout symphony-devops-workflows
      #  uses: actions/checkout@v4.1.1
      #  with:
      #    repository: AVISPL/symphony-devops-workflows
      #    ref: develop
      #    path: ./symphony-devops-workflows
      #    token: ${{ secrets.AVI_SYMPHONY_DEV_CI_TOKEN }}
      - name: Run shell commands to generate vulnerabilities.json
        shell: bash
        run: |
          # read dependabot-monitored-vulnerabilities-projects.txt file and insert into SYMPHONY_MODULES array
          IFS=$'\n' SYMPHONY_MODULES=($(<dependabot-monitored-vulnerabilities-projects.txt))
          # add "[" to beginning of file
          echo "[" >> vulnerabilities.json
          # create empty paused_modules.txt
          touch paused_modules.txt
          for module in ${SYMPHONY_MODULES[@]}; do
            echo $URL_START$module$URL_PAUSED_END
            DEPENDABOT_ENABLED_PAUSED=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.AVI_SYMPHONY_DEV_CI_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" "$URL_START$module$URL_PAUSED_END")
            
            if [[ $DEPENDABOT_ENABLED_PAUSED == *"enabled\": false"*  ]] || [[ $DEPENDABOT_ENABLED_PAUSED == *"paused\": true"*  ]]; then
              echo "Dependabot Alert Status for $module:" >> dependabot_status.txt
              if [[ $DEPENDABOT_ENABLED_PAUSED == *"enabled\": false"*  ]]; then
                echo "- Dependabot Alerts are DISABLED!" >> dependabot_status.txt
              fi
              if [[ $DEPENDABOT_ENABLED_PAUSED == *"paused\": true"*  ]]; then
                echo "- Dependabot Alerts are PAUSED!" >> dependabot_status.txt
                echo -e "AVISPL/$module" >> paused_modules.txt
              fi
              echo "---------------------------------------" >> dependabot_status.txt
            fi
            echo $URL_START$module$URL_END?severity=$SEVERITIES&state=$STATES
            temp_json=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.AVI_SYMPHONY_DEV_CI_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" "$URL_START$module$URL_END?severity=$SEVERITIES&state=$STATES")
            length=${#temp_json}
            if (($length > 4)); then
              temp_json=${temp_json::0}${temp_json:1}
              temp_json=${temp_json::length-1}${temp_json:length}
              # replace last character, which is "]" with comma
              temp_json=${temp_json%?},
              echo $temp_json >> vulnerabilities.json
            fi
          done
          # remove last 2 characters which are "," and "\n"
          truncate -s -2 vulnerabilities.json
          # add "]" to end of temp_json file
          echo "]" >> vulnerabilities.json
          # create github output of all modules that dependabot is currently paused on
          PAUSED=$(jq -R -r -s -c 'split("\n") | map(select(length > 0))' < ./paused_modules.txt)
          if [ "$PAUSED" == "[]" ]; then
            echo "paused_modules.txt file does not contains any Symphony modules that are currently paused...NOTHING TO UNPAUSE!!"
          fi
      - name: Upload dependabot_status.txt
        uses: actions/upload-artifact@v3
        with:
          name: dependabot_status.txt
          path: dependabot_status.txt
      - name: Install groovy binary (https://groovy.apache.org/)
        uses: ./actions/install_groovy
      - name: Run shell commands to generate vulnerabilities.html
        shell: bash
        run: |
          # call Groovy to generate vulnerabilities report
          groovy $GITHUB_WORKSPACE/.github/scripts/symphony_vulnerability_parser.groovy vulnerabilities.json  > vulnerabilities.html
      - name: Upload vulnerabilities.html
        uses: actions/upload-artifact@v3
        with:
          name: vulnerabilities.html
          path: vulnerabilities.html
      # GitHub actions cannot be executed directly from private repository
      # (feature not available yet)
      # So checkout the actions into local workspace directory and run them from there
      - name: Checkout actions from private repository
        uses: actions/checkout@v4.1.1
        with:
          repository: AVISPL/symphony-devops-workflows
          # Select revision
          ref: 'develop'
          # Indicate where to check out project to
          path: ./.github/symphony-devops-workflows
          clean: 'true'
      - name: Send mail
        uses: dawidd6/action-send-mail@v3.11.0
        with:
          server_address: ${{ secrets.BUILDER_SMTP_HOST }}
          ignore_cert: true
          secure: false
          subject: Detected Vulnerabilities Report
          to: shervin.mostashfi@avispl.com
          from: vulnerabilities@github.com
          html_body: file://email_vulnerabilities.html
          attachments: paused_modules.txt
      #  
      # Build job matrix from input file
      - name: Build matrix containing detected modules that should be unpaused
        id: vulnerability-finder
        uses: ./.github/symphony-devops-workflows/actions/job_strategy_matrix_from_text_file
        with:
          file: paused_modules.txt

  unpause_dependabot:
    # only run this job if the output of previous job contains Symphony modules to release
    if: needs.vulnerability-finder.outputs.matrix != '[]'
    needs: vulnerability-finder

    # Call reusable workflow
    uses: AVISPL/symphony-devops-workflows/.github/workflows/dependabot_force_run.reusable.workflow.yml@develop
    with:
      # JSON string array form (e.g "[ 'AVISPL/my-repo' ]")
      repositories: ${{ needs.vulnerability-finder.outputs.matrix }}
      # WARNING : use fromJSON to convert job input which is not an actual boolean
      #   to an actual boolean as expected by reusable workflow
      cleanup-old-dummy-changes: true
      symphony-devops-workflows_ref: 'develop'
    secrets:
      ciToken: ${{ secrets.AVI_SYMPHONY_DEV_CI_TOKEN }}
