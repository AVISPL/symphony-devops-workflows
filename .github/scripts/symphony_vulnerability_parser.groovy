#!/usr/bin/groovy
// This script requires one CLI argument which is the name of json file that gets used to generate Symphony vulnerability report.
// The output of this script is an HTML file containing table of all vulnerabilities detected by Github dependabot.

import groovy.json.JsonSlurper
import groovy.xml.MarkupBuilder

String vulnerabilities_json = new File("./" + args[0]).text;

def json = new JsonSlurper().parseText(vulnerabilities_json)
def vulnerabilities = json.collect { v -> 
	[
		"Symphony Module": v.url == null ? "N/A" : (v.url).replace("https://api.github.com/repos/AVISPL/","").split("/")[0],
		"Dependabot Alert": v.html_url == null ? "N/A" : v.html_url,
		"Ecosystem": v.security_vulnerability.package.ecosystem == null ? "N/A" : v.security_vulnerability.package.ecosystem,
		"Package": v.security_vulnerability.package.name == null ? "N/A" : v.security_vulnerability.package.name,
		"State" : v.state == null ? "N/A" : v.state,
		"Severity": v.security_advisory.severity == null ? "N/A" : v.security_advisory.severity,
		"CVE ID": v.security_advisory.cve_id == null ? "N/A" : v.security_advisory.cve_id,
		"GHSA ID": v.security_advisory.ghsa_id == null ? "N/A" : v.security_advisory.ghsa_id,
		"Affected Versions": v.security_vulnerability.vulnerable_version_range == null ? "N/A" : v.security_vulnerability.vulnerable_version_range,
		"Fixed Version":  v.security_vulnerability.first_patched_version == null ? "N/A" : v.security_vulnerability.first_patched_version.identifier,
		"Summary": v.security_advisory.summary == null ? "N/A" : v.security_advisory.summary,
		"Published On": v.security_advisory.published_at == null ? "N/A" : v.security_advisory.published_at,
		"Updated On": v.security_advisory.updated_at == null ? "N/A" : v.security_advisory.updated_at
	]
}

// Render HTML
new MarkupBuilder().html {
	head {
		style {
			mkp.yield """
					.datagrid table { border-collapse: collapse; text-align: left; width: 100%; }
					.datagrid {font: normal 12px/150% Arial, Helvetica, sans-serif; background: #fff; overflow-x: auto; border: 1px solid #36752D;
-webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; }
					.datagrid table td { border-bottom:1px solid black; border-top:1px solid black; max-width:100%; white-space:nowrap; padding: 5px 10px;},
					.datagrid table th { padding: 3px 10px; }
					.datagrid table thead th {background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #36752D), color-stop(1, #275420)
);background:-moz-linear-gradient( center top, #36752D 5%, #275420 100% );filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#36752D',
endColorstr='#275420');background-color:#36752D; color:#FFFFFF; font-size: 15px; font-weight: bold; border-left: 1px solid #36752D; }
					.datagrid table thead th:first-child { border: none; }
					.datagrid table tbody td { color: #000000; border-left: 1px solid #000000;font-size: 15px;font-weight: normal; }
					.datagrid table tbody .alt td { background: #DFFFDE; color: #275420; }
					.datagrid table tbody td:first-child { border-bottom:1px solid black; border-top:1px solid black; }
					.datagrid table tbody tr:last-child td { border-bottom: none; }
					.datagrid table tfoot td div { border-top: 1px solid #36752D;background: #DFFFDE;}
					.datagrid table tfoot td { padding: 0; font-size: 12px }
					.datagrid table tfoot td div{ padding: 2px; }
					.datagrid table tfoot td ul { margin: 0; padding: 0; list-style: none; text-align: right; }
					.datagrid table tfoot li { display: inline; }
					.datagrid table tfoot li a { text-decoration: none; display: inline-block;  padding: 2px 8px; margin: 1px;color: #FFFFFF;border: 1px solid
#36752D;-webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05,
#36752D), color-stop(1, #275420) );background:-moz-linear-gradient( center top, #36752D 5%, #275420 100%
);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#36752D', endColorstr='#275420');background-color:#36752D; }
					.datagrid table tfoot ul.active, .datagrid table tfoot ul a:hover { text-decoration: none;border-color: #275420; color: #FFFFFF; background:
none; background-color:#36752D;}
					div.dhtmlx_window_active, div.dhx_modal_cover_dv { position: fixed !important; }
					::-webkit-scrollbar { background: transparent; }
			"""
		}
	}
	body (style: "display: inline-block;") {
		h1 {
			mkp.yield "Symphony Vulnerability Report ${new Date()}"
		}
		div(class:'datagrid') {
			table {
				String[] row = new String[13]
				def headerCounter = 0
				
				for (int i = 0; i < vulnerabilities.size(); i++) {
					def color = 'white'
					tr {
						vulnerabilities[i].eachWithIndex { key, value, index ->
							if (headerCounter < 13) {
								headerCounter++
									th (class: 'key', style: "background-color:#D5D8DC; text-align:center; border-bottom:3px solid black; border-top:3px solid black; border-right:1px solid black; border-left:1px solid black;") {
										mkp.yield key
									}
							}
							row[index] = value
						}
					}
					tr {
						for (int j = 0; j < row.size(); j++) {
							def state = row[4]
							if (state.equals("fixed")) {
								color = '#49CF36'
							} else {
								def severity = row[5]
								if (severity.equals("critical")) {
									color = '#EC7063'
								} else if (severity.equals("high")) {
									color = '#FB8C00'
								} else if (severity.equals("medium")) {
									color = '#FFC107'
								} else  if (severity.equals("low")) {
									color = '#FFEB3B'
								}
							}
							if (j == 1) {
								td (class: 'row', style: "background-color:$color;") {
									def url = row[j]
									mkp.yieldUnescaped "<a href=\"${url}\">${url}</a>"
								}
							} else {
								td (class: 'row', style: "background-color:$color;") {
									mkp.yield row[j] == null ? "N/A" : row[j]
								}
							}
						}
					}
				}
			}
		}
	}
}